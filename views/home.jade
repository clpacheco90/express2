doctype html
//
  // Canes Technologies
html
  head
    meta(charset='utf-8')
    |         
    title Aurora Orange
    |         
    script.
      if (location.href.indexOf('file:') == 0) {
      document.write('<h1 style="color:red;">Please load this HTML file on HTTP or HTTPS.</h1>');
      }
    |         
    meta(http-equiv='content-type', content='text/html; charset=utf-8')
    |         
    meta(name='author', content='Canes Technologies')
    |         
    script(src='RecordRTC.js')
    |         
    style.
      html { background-color: #333333; }
      body {
      margin: 1% 20%;
      text-align: center;
      }
      hr {
      }
      a,h3,h2 {
      color: coral;
      text-decoration: none;
      }
      a,h3,h2:hover, a:focus { color:#fc6c1f; }
      a:active { color: #000; }
      audio, video {
      background-color: #000;
      border: 1px solid coral;
      width: 60%;
      }
      .btn[disabled], input[disabled] { background: rgba(216, 205, 205, 0.2); }
      .btn {
      font-family: Courier New;
      color: #ffffff;
      font-size: 20px;
      background: coral;
      padding: 10px 20px 10px 20px;
      text-decoration: none;
      width: auto;
      }
      .btn:hover {
      background: #fc6c1f;
      text-decoration: none;
      }
  |     
  body
    h2 AURORA
    | &#x9;&#x9;
    h3
      a(href='http://canestechnologies.com') CANES TECHNOLOGIES
    |         
    p
      video
    |         
    |         
    div(style='height:50px;')
      label#percentage 0%
      |             
      progress#progress-bar(value='0')
      br
    |            
    |         
    div(style=' position:relative;    \
    left: 50%;\
    width:300px;\
    margin-left: -150px; /*set to a negative number 1/2 of your width*/')
      #btn-stop-recording.btn(style='display:none;') Parar Grava&ccedil;&atilde;o
      |             
      #btn-start-recording.btn Iniciar Grava&ccedil;&atilde;o
    |         
    |         
    script.
      // fetching DOM references
      var btnStartRecording = document.querySelector('#btn-start-recording');
      var btnStopRecording  = document.querySelector('#btn-stop-recording');
      btnStopRecording.style.display = 'none';
      var videoElement      = document.querySelector('video');
      var progressBar = document.querySelector('#progress-bar');
      var percentage = document.querySelector('#percentage');
    |         
    |         
    script.
      // global variables
      var currentBrowser = !!navigator.mozGetUserMedia ? 'gecko' : 'chromium';
      var fileName;
      var audioRecorder;
      var videoRecorder;
      // Firefox can record both audio/video in single webm container
      // Don't need to create multiple instances of the RecordRTC for Firefox
      // You can even use below property to force recording only audio blob on chrome
      // var isRecordOnlyAudio = true;
      var isRecordOnlyAudio = !!navigator.mozGetUserMedia;
      // if recording only audio, we should replace "HTMLVideoElement" with "HTMLAudioElement"
      if(isRecordOnlyAudio && currentBrowser == 'chromium') {
      var parentNode = videoElement.parentNode;
      parentNode.removeChild(videoElement);
      videoElement = document.createElement('audio');
      videoElement.style.padding = '.4em';
      videoElement.controls = true;
      parentNode.appendChild(videoElement);
      }
    |         
    |         
    script.
      // reusable helpers
      // this function submits both audio/video or single recorded blob to nodejs server
      function postFiles(audio, video) {
      // getting unique identifier for the file name
      fileName = generateRandomString();
      // this object is used to allow submitting multiple recorded blobs
      var files = { };
      // recorded audio blob
      files.audio = {
      name: fileName + '.' + audio.blob.type.split('/')[1],
      type: audio.blob.type,
      contents: audio.dataURL
      };
      if(video) {
      files.video = {
      name: fileName + '.' + video.blob.type.split('/')[1],
      type: video.blob.type,
      contents: video.dataURL
      };
      }
      files.uploadOnlyAudio = !video;
      videoElement.src = '';
      videoElement.poster = '/ajax-loader.gif';
      xhr('/upload', JSON.stringify(files), function(_fileName) {
      //var href = location.href.substr(0, location.href.lastIndexOf('/') + 1);
      videoElement.src = _fileName;
      videoElement.play();
      videoElement.muted = false;
      videoElement.controls = true;
      var h2 = document.createElement('h3');
      h2.innerHTML = '<a href="' + videoElement.src + '">' + videoElement.src + '</a>';
      document.body.appendChild(h2);
      });
      if(mediaStream) mediaStream.stop();
      }
      // XHR2/FormData
      function xhr(url, data, callback) {
      var request = new XMLHttpRequest();
      request.onreadystatechange = function() {
      if (request.readyState == 4 && request.status == 200) {
      callback(request.responseText);
      }
      };
      request.upload.onprogress = function(event) {
      progressBar.max = event.total;
      progressBar.value = event.loaded;
      progressBar.innerHTML = 'Upload Progress ' + Math.round(event.loaded / event.total * 100) + "%";
      };
      request.upload.onload = function() {
      percentage.style.display = 'none';
      progressBar.style.display = 'none';
      btnStopRecording.style.display = 'none';
      };
      request.open('POST', url);
      request.send(data);
      }
      // generating random string
      function generateRandomString() {
      if (window.crypto) {
      var a = window.crypto.getRandomValues(new Uint32Array(3)),
      token = '';
      for (var i = 0, l = a.length; i < l; i++) token += a[i].toString(36);
      return token;
      } else {
      return (Math.random() * new Date().getTime()).toString(36).replace( /\\./g , '');
      }
      }
      // when btnStopRecording is clicked
      function onStopRecording() {
      audioRecorder.getDataURL(function(audioDataURL) {
      var audio = {
      blob: audioRecorder.getBlob(),
      dataURL: audioDataURL
      };
      // if record both wav and webm
      if(!isRecordOnlyAudio) {
      videoRecorder.getDataURL(function(videoDataURL) {
      var video = {
      blob: videoRecorder.getBlob(),
      dataURL: videoDataURL
      };
      postFiles(audio, video);
      });
      }
      // if record only audio (either wav or ogg)
      if (isRecordOnlyAudio) postFiles(audio);
      });
      }
    |         
    |         
    script.
      var mediaStream = null;
      // reusable getUserMedia
      function captureUserMedia(success_callback) {
      var session = {
      audio: true,
      video: true
      };
      navigator.getUserMedia(session, success_callback, function(error) {
      alert( JSON.stringify(error) );
      });
      }
    | &#x9;&#x9;
    |         
    script.
      // UI events handling
      btnStartRecording.onclick = function() {
      btnStartRecording.disabled = true;
      btnStartRecording.style.display = 'none';
      btnStopRecording.style.display = 'block';
      captureUserMedia(function(stream) {
      mediaStream = stream;
      videoElement.src = window.URL.createObjectURL(stream);
      videoElement.play();
      videoElement.muted = true;
      videoElement.controls = false;
      // it is second parameter of the RecordRTC
      var audioConfig = {};
      if(!isRecordOnlyAudio) {
      audioConfig.onAudioProcessStarted = function() {
      // invoke video recorder in this callback
      // to get maximum sync
      videoRecorder.startRecording();
      };
      }
      audioRecorder = RecordRTC(stream, audioConfig);
      if(!isRecordOnlyAudio) {
      // it is second parameter of the RecordRTC
      var videoConfig = { type: 'video' };
      videoRecorder = RecordRTC(stream, videoConfig);
      }
      audioRecorder.startRecording();
      // enable stop-recording button
      btnStopRecording.disabled = false;
      });
      };
      btnStopRecording.onclick = function() {
      btnStartRecording.style.display = 'block';
      btnStopRecording.disabled = true;
      if(isRecordOnlyAudio) {
      audioRecorder.stopRecording(onStopRecording);
      }
      if(!isRecordOnlyAudio) {
      audioRecorder.stopRecording(function() {
      videoRecorder.stopRecording(function() {
      onStopRecording();
      });
      });
      }
      };
    |         
    |         
    script.
      window.onbeforeunload = function() {
      startRecording.disabled = false;
      };
    |         
    footer(style='width:100%;position: fixed; right: 0; text-align: center;color:red;')
